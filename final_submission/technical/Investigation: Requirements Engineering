1. What is Requirements Engineering?<br>
Requirements Engineering is the process of figuring out what a system or software needs to do. It involves talking to the people who will use or benefit from the software (called stakeholders), writing down their needs, and making sure that everyone understands what is required before the actual development starts. This helps reduce misunderstandings and ensures the final product does what it’s supposed to.[1]<br>

2. In an Agile/Iterative Software Development Setting, Will You Undergo This Process Once or Multiple Times?<br>
In Agile or iterative development, you won’t just gather requirements once. Since Agile is all about being flexible and making changes as needed, you will go through this process many times. With each sprint or iteration, new requirements might come up or old ones might change based on feedback from users or stakeholders.[1]<br>

3. What are the Different Requirements Engineering Activities? Who Takes Part in Those Activities?<br>
Here are the main activities in Requirements Engineering:<br>
Elicitation: This means gathering all the requirements by talking to people who will use the software or are affected by it.<br>
Who is involved: Stakeholders, Business Analysts, Product Owners.<br>
Specification: Writing down the requirements in a way that everyone can understand.<br>
Who is involved: Business Analysts, Developers.<br>
Validation: Making sure that the requirements are correct and that the system can actually be built based on them.<br>
Who is involved: Developers, QA Engineers, Stakeholders.<br>
Management: Handling any changes to the requirements as the project moves along.<br>
Who is involved: Project Managers, Product Owners, Business Analysts.[2]<br>

4. Define Each of the Participants in the Above Activities<br>
Developer: The person who writes the code and builds the system.<br>
Stakeholder: Anyone who has an interest in the system, like the client, end-users, or company managers.<br>
Business Analyst: The person who talks to the stakeholders and writes down what they want in a way that developers can use.<br>
Product Owner: The person responsible for making sure the team builds what the client needs.<br>
Project Manager: The person who makes sure the project stays on track, on time, and within budget.<br>
QA Engineer: The person who tests the system to make sure it works as expected and meets the requirements.[3]<br>

5. Roles in the Above Two Questions and Who Fills Them In your group, these roles might be filled by the following people:<br>
Project Manager: Venkata Srinivasa Bhargav Varma Sagi<br>
Front end developer: Praneeth Shanigaram<br>
Back end developer: Varsha Pusupati<br>
Tester: Akanksha Mamidaga<br>
Business Analyst: Padma Sri Garikimukku<br>
Client: Mark Chai<br>

6. Define Functional Requirement<br>
A functional requirement describes the actions, behaviors, and tasks that a system should carry out in order to achieve its goals. It outlines how a user and the system interact, with a particular attention on inputs, processes, and outputs. These specifications are essential for directing the process of development and making sure that the system achieves its goals. [4]<br>

7. Define Non-Functional Requirement.<br>
Functionality of a system, with significance on features like speed, security, and usability, is described by a non-functional requirement. It states not what the system should do, but rather how well it should perform particular tasks, such as loading quickly or ensuring the security of user data. These specifications guarantee the system's ease of use and dependability. [4]<br>


8. What Project Artifacts Should Result from Requirements Engineering?<br>
Here are some of the documents or artifacts you might create:<br>
Requirements Document: A document that lists all the requirements for the system.<br>
User Stories: Short descriptions of features from the user’s perspective.<br>
Diagrams: Visual representations, like flowcharts or use case diagrams, showing how the system works.[5]<br>

9. Define Requirements Elicitation<br>
Requirements elicitation is just a fancy way of saying “gathering requirements.” It involves talking to the client, users, and stakeholders to figure out what the software needs to do.[5]<br>

10. What Are the Sequence of Steps During Requirements Elicitation? Which Step is Potentially the Hardest?<br>
Here are the steps for gathering requirements:<br>
Identify stakeholders: Find out who will use the system and who will give input.<br>
Collect information: Ask questions, interview stakeholders, or observe how they currently do things.<br>
Document the requirements: Write down everything you gathered so that everyone can understand it.<br>
Validate the requirements: Make sure the requirements are correct and possible to achieve.<br>
The hardest step is often Collecting information because stakeholders might not always know exactly what they want, or they might have different opinions.[5]<br>

11. Key Things to Identify When Working with the Client. What Kinds of Questions Should You Ask?<br>
When meeting with the client, it’s important to figure out:<br>
The goals: What do they want to achieve with this project?<br>
The key features: What are the most important things the system needs to do?<br>
User expectations: How do they expect the system to behave?<br>
Any limitations: Are there any constraints, like time, budget, or existing systems that need to be considered?<br>
Questions to ask might include:<br>
What’s the main problem you want to solve?<br>
Who will use this system, and what do they need?<br>
Are there any specific features you can’t live without?<br>
What are the software changes will you do in the future?<br>




References :<br>
1.	Lucia, Andrea De, and Abdallah Qusef. (2010). “Requirements Engineering in Agile Software Development.” Joursisnal of Emerging Technologies in Web Intelligence 2 (3). https://doi.org/10.4304/jetwi.2.3.212-220.<br>
2.	Pandey, S., Pokharel, S. and Hassan, R. (2018) Towards “Cyber-Physical Requirement Engineering Elicitation Tool Support.” 2018 World Automation Congress (WAC), Stevenson, WA, 1-5.https://doi.org/10.23919/WAC.2018.8430399 <br>
3.	Van Lamsweerde, A. (2009). “Requirements Engineering: From System Goals to UML Models to Software Specifications.” Wiley.https://www.academia.edu/33019629/Requirements_Engineering_From_System_Goals_to_UML_Models_to_Software_Specifications_Fundamentals_of_RE_Chapter_4_Requirements_Specification_and_Documentation<br>
4.	Chung, L., Nixon, B.A., Yu, E. and Mylopoulos, J. (2012) “Nonfunctional Requirements inSoftwareEngineering.”.https://www.academia.edu/62009607/Non_functional_requirements_in_software_engineering <br>
5.	Zowghi, D., & Coulin, C. (2005). “Requirements Elicitation: A Survey of Techniques.” In Advances in Requirements Engineering, 1-20. https://doi.org/10.1007/978-1-4020-3642-4_1 
